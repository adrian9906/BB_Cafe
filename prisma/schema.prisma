// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  name      String?
  username  String?     @unique
  password  String
  email     String      @unique
  image     String?
  rol       UserRole   @default(USER)
  createdAt DateTime    @default(now()) @map(name: "created_at")
  updatedAt DateTime    @updatedAt @map(name: "updated_at")
  accounts  Account[]
  sessions  Session[]

  Cart Cart[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole{
  USER
  ADMIN
}
model Product {
  id        String       @id @default(cuid())
  name      String
  description String
  price     Float
  image     String
  rating    Float
  category  String
  stock     Int      @default(0)
  featured  Boolean  @default(false)
  flavors   String   @default("none")
  Cart Cart[]
}

model Workers {
  id        String   @id @default(uuid())
  name      String
  position  String
  description String
  image     String
  email     String
  phone     String
  
}

model Cart {
  id        String @id @default(uuid())
  userId    String? 
  items     String
  SessionID String?
  productID String?
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  product   Product?     @relation(fields: [productID], references: [id], onDelete: SetNull)
}

model CustomOrder {
  id               String   @id @default(uuid())
  name             String   
  phone            String   
  email            String  
  flavors          String? 
  decorations      String?  
  deliveryDate     DateTime 
  type             String   
  address          String   
  themeType        String? 
  quantity         Int      
  theme            String?  
  request          String?  
  referenceImage   String?  
  deliveryAddress  String?  
  specialRequests  String?  
  price            Float?   @default(0)
  state            String?  @default("pending")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}